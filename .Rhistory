pxome.graph <- readRDS('data/pxome_graph.rds') + bd.g
graph = trs.graph
# remove edges below kappa score threshold
sub.g = delete.edges(graph ,
edges = E(graph)[ E(graph)$kappa < kappa_thresh ] )
trs.graph
sub.g
if( 'n_le_genes' %in% vertex_attr_names(sub.g) ){
sub.g = delete.vertices(sub.g,
v = V(sub.g)[ V(sub.g)$none == 1]
)
}
vertex_attr_names(sub.g)
vertex_attr_names(trs.graph)
x = tibble(g = vertex_attr(trs.graph)) %>% pivot_wider(g)
x = tibble(g = vertex_attr(trs.graph)) %>% unnest_wider(g)
x = tibble(g = vertex_attr(trs.graph)) %>% unnest_wider(g, names_sep = '')
x = tibble(g = vertex_attr(trs.graph) %>% t()) %>% unnest_wider(g, names_sep = '')
x = tibble(g = vertex_attr(trs.graph) %>% t()) %>% unnest(g, names_sep = '')
x
tibble(g = vertex_attr(trs.graph)) %>% t() %>% head
tibble(g = vertex_attr(trs.graph)) %>% t() %>% unnest() %>% head()
x = tibble( na = vertex.attributes(trs.graph) ) %>%
t() %>% as_tibble(rownames = NA, .name_repair = 'unique') %>% unnest(everything()) %>%
rename_with(., ~names(vertex.attributes(trs.graph)), everything())
View(x)
head(bd.g)
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct() %>% mutate(kappa = 1) %>%
igraph::graph_from_data_frame(directed = F)
bd.e
trs.graph <- readRDS('data/trs_graph.rds') + bd.e
trs.graph
x = tibble( na = vertex.attributes(trs.graph) ) %>%
t() %>% as_tibble(rownames = NA, .name_repair = 'unique') %>% unnest(everything()) %>%
rename_with(., ~names(vertex.attributes(trs.graph)), everything())
names(x)
cat(names(x))
cat(names(x), sep = '\n')
# %>% igraph::graph_from_data_frame(directed = F)
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain) %>% distinct() %>%
mutate(
ont = NA,
size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
id = NA,
name = NA
)
bd.v
# %>% igraph::graph_from_data_frame(directed = F)
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain, size = n_symbol) %>% distinct() %>%
mutate(
ont = NA,
# size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
id = NA,
name = NA
)
dim(bd.v)
View(bd.v)
# %>% igraph::graph_from_data_frame(directed = F)
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain) %>% distinct() %>%
mutate(
ont = NA,
size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
id = NA,
name = NA
)
trs.graph <- readRDS('data/trs_graph.rds')
trs.graph
bd.v
bd.v %>% nest()
as.list(spread(bd.v))
as.list(spread(bd.v, names(bd.v)))
as.list(spread(bd.v, key = names(bd.v)))
bd.v %>% pivot_longer()
bd.v %>% pivot_longer(cols = everything())
bd.v %>% pivot_longer(cols = everything()) %>% group_by(name) %>% summarise(value = list(value))
bd.v %>% pivot_longer(cols = everything()) %>% group_by(name) %>% summarise(value = list(value)) %>% pull(value, name= name)
# %>% igraph::graph_from_data_frame(directed = F)
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain) %>% distinct() %>%
mutate(
ont = NA,
size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
id = NA,
name = NA
) %>% pivot_longer(cols = everything()) %>%
group_by(name) %>% summarise(value = list(value)) %>%
pull(value, name= name)
bd.v
x = add.vertices(trs.graph, nv = 19, attr = bd.v)
x
trs.graph
3142+19
names(V(x)) %>% tail()
?add.vertices
x = igraph::add.vertices(trs.graph, nv = 19, attr = bd.v)
x
names(V(x)) %>% tail
g <- make_empty_graph() %>%
add_vertices(3, color = "red") %>%
add_vertices(2, color = "green") %>%
add_edges(c(
1, 2,
2, 3,
3, 4,
4, 5
))
g
V(g)[[]]
plot(g)
rm(g)
names(V(x)) %>% tail()
names(V(x)) %>% tail(n = 25)
names(V(x))[(length(V(x))-20):length(V(x))] %>% tail(n = 25)
names(V(x))[(length(V(x))-18):length(V(x))]
names(V(x))[(length(V(x))-19):length(V(x))]
names(V(x))[(length(V(x))-18):length(V(x))]
y = tibble( na = vertex.attributes(trs.graph) ) %>%
t() %>% as_tibble(rownames = NA, .name_repair = 'unique') %>% unnest(everything()) %>%
rename_with(., ~names(vertex.attributes(trs.graph)), everything())
View(y)
x
V(x)[length(V(x))]
# %>% igraph::graph_from_data_frame(directed = F)
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain) %>% distinct() %>%
mutate(
ont = NA,
size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
name = term
) %>% pivot_longer(cols = everything()) %>%
group_by(name) %>% summarise(value = list(value)) %>%
pull(value, name= name)
x = igraph::add.vertices(trs.graph, nv = 19, attr = bd.v)
V(x)[length(V(x))]
tibble( na = vertex.attributes(x) ) %>%
t() %>% as_tibble(rownames = NA, .name_repair = 'unique') %>% unnest(everything()) %>%
rename_with(., ~names(vertex.attributes(x)), everything()) %>% View()
head(bd.e)
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct() %>% mutate(kappa = 1)
head(bd.e)
x1 = igraph::add.edges(x, bd.e)
x
E(x)[1]
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct() %>% mutate(kappa = 1) %>%
pull(kappa, name = paste0(n1,'--',n2))
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct() %>%
mutate(kappa = 1, id =  paste0(n1,'--',n2) ) %>%
pull(kappa, name = id)
x1 = igraph::add.edges(x, attr = bd.e)
x1 = igraph::add.edges(x,bd.e)
x1
E(x1)[length(E(x1))]
tibble( na = edge.attributes(x1) ) %>%
t() %>% as_tibble(rownames = NA, .name_repair = 'unique') %>% unnest(everything()) %>%
rename_with(., ~names(edge.attributes(x1)), everything()) %>% View()
bd.v[[1]][1]
glimpse(bd.v)
glimpse(bd.e)
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct() %>%
mutate(kappa = 1, id =  paste0(n1,'--',n2) )
x1 = igraph::add.edges(x,bd.e$id, attr = list('kappa'=bd.e$kappa))
x1 = igraph::add.edges(x,bd.e %>% select(n1,n2) %>% pivot_longer(), attr = list('kappa'=bd.e$kappa))
bd.e %>% select(n1,n2) %>% pivot_longer() %>% head()
bd.e %>% select(n1,n2) %>% pivot_longer(everything()) %>% head()
bd.e %>% select(n1,n2) %>% pivot_longer(everything()) %>% pull(value)
x1 = igraph::add.edges(x,
bd.e %>% select(n1,n2) %>% pivot_longer(everything()) %>% pull(value),
attr = list('kappa'=1))
traceback()
x1 = x %>% igraph::add.edges( bd.e %>% select(n1,n2) %>% pivot_longer(everything()) %>% pull(value) )
names(V(x)) %>% tail()
names(V(x)) %>% head()
head(bd.e)
x1 = x %>% igraph::add.edges( bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>% pivot_longer(everything()) %>% pull(value) )
x1
edge_attr(x1) %>% tail()
edge_attr(x1, 'kappa') %>% tail()
x1 = x %>% igraph::add.edges( bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>% pivot_longer(everything()) %>% pull(value) , attr = list('kappa'=1))
edge_attr(x1, 'kappa') %>% tail()
bd.e <- biodom_genes %>% filter(!is.na(GO_ID), !is.na(Biodomain)) %>%
select(n1 = GO_ID, n2 = Biodomain) %>% distinct()
bd.v <- biodom_genes %>% filter(!is.na(Biodomain)) %>%
select(term = Biodomain) %>% distinct() %>%
mutate(
ont = NA,
size = NA,
n_le_genes = NA,
NES = NA,
padj = NA,
`Mitochondrial Metabolism` = NA,
none = NA,
Synapse = NA,
`Structural Stabilization` = NA,
`Immune Response` = NA,
`Oxidative Stress` = NA,
`Lipid Metabolism` = NA,
`Cell Cycle` = NA,
Proteostasis = NA,
Endolysosome = NA,
Apoptosis = NA,
Vasculature = NA,
`Tau Homeostasis` = NA,
Myelination = NA,
`Metal Binding and Homeostasis` = NA,
`APP Metabolism` = NA,
Autophagy = NA,
`RNA Spliceosome` = NA,
Epigenetic = NA,
`DNA Repair` = NA,
name = term
) %>% pivot_longer(cols = everything()) %>%
group_by(name) %>% summarise(value = list(value)) %>%
pull(value, name = name)
trs.graph <- igraph::add.vertices(trs.graph, nv = 19, attr = bd.v)
trs.graph <- igraph::add.edges( trs.graph,
bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>%
pivot_longer(everything()) %>% pull(value) ,
attr = list('kappa'=1))
saveRDS(trs.graph, 'trs_graph.rds')
gen.graph <- igraph::add.vertices(gen.graph, nv = 19, attr = bd.v)
gen.graph <- igraph::add.edges( gen.graph,
bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>%
pivot_longer(everything()) %>% pull(value) ,
attr = list('kappa'=1))
saveRDS(gen.graph, 'gen_graph.rds')
txome.graph <- igraph::add.vertices(txome.graph, nv = 19, attr = bd.v)
txome.graph <- igraph::add.edges( txome.graph,
bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>%
pivot_longer(everything()) %>% pull(value) ,
attr = list('kappa'=1))
saveRDS(txome.graph, 'txome_graph.rds')
pxome.graph <- igraph::add.vertices(pxome.graph, nv = 19, attr = bd.v)
pxome.graph <- igraph::add.edges( pxome.graph,
bd.e %>% filter(n1 %in% names(V(x))) %>% select(n1,n2) %>%
pivot_longer(everything()) %>% pull(value) ,
attr = list('kappa'=1))
saveRDS(pxome.graph, 'pxome_graph.rds')
biodom_genes = fst::read.fst('data/biodom_genes.fst') %>% as_tibble()
dom.cols = readRDS('data/dom_cols.rds')
term.graph = readRDS('data/term_graph.rds')
trs.graph <- readRDS('data/trs_graph.rds')
gen.graph <- readRDS('data/gen_graph.rds')
txome.graph <- readRDS('data/txome_graph.rds')
pxome.graph <- readRDS('data/pxome_graph.rds')
graph
graph = trs.graph
graph
# Load Pre-formatted Data -------------------------------------------------
##
# load from local data/ dir
##
biodom_genes = fst::read.fst('data/biodom_genes.fst') %>% as_tibble()
dom.cols = readRDS('data/dom_cols.rds')
term.graph = readRDS('data/term_graph.rds')
trs.graph <- readRDS('data/trs_graph.rds')
gen.graph <- readRDS('data/gen_graph.rds')
txome.graph <- readRDS('data/txome_graph.rds')
pxome.graph <- readRDS('data/pxome_graph.rds')
trs.graph
graph = trs.graph
# remove edges below kappa score threshold
sub.g = delete.edges(graph ,
edges = E(graph)[ E(graph)$kappa < kappa_thresh ] )
if( 'n_le_genes' %in% vertex_attr_names(sub.g) ){
sub.g = delete.vertices(sub.g,
v = V(sub.g)[ V(sub.g)$none == 1]
)
}
if( 'n_le_genes' %in% vertex_attr_names(sub.g) ){
sub.g = delete.vertices(sub.g,
v = V(sub.g)[ !is.na(V(sub.g)$none) & V(sub.g)$none == 1]
)
}
# identify terms N hops away from the query
terms <- neighborhood(sub.g, order = depth, nodes = tg_id)[[1]]
terms
depth
neighborhood(sub.g, order = 09, nodes = tg_id)[[1]]
neighborhood(sub.g, order = 0, nodes = tg_id)[[1]]
neighborhood(sub.g, order = 1, nodes = tg_id)[[1]]
neighborhood(sub.g, order = 2, nodes = tg_id)[[1]]
dt = distance_table(sub.g)
dt %>% head()
sub.g
dt = distance_table(sub.g, directed = F)
dt
neighborhood(sub.g, order = depth, nodes = tg_id)[[1]]
# identify terms N hops away from the query
terms <- neighborhood(sub.g, order = depth, nodes = tg_id)[[1]]
# remove terms not annotated to term
sub.g <- delete.vertices(
sub.g,
V(sub.g)[ !( V(sub.g) %in% unique(terms)
# | !is.na(igraph::V(sub.g)$label)
)
]
)
# Remove the unconnected nodes.
unconnected_nodes <- which( degree(sub.g) == 0 )
sub.g <- delete.vertices(sub.g, unconnected_nodes)
# remove redundant edges
simpl <- igraph::simplify(sub.g, edge.attr.comb = c(kappa = 'max'))
V(simpl)$degree <- degree(simpl)
V(simpl)$shape <- 20
V(simpl)$shape[ which( names(V(simpl)) == tg_id) ] <- 18
V(simpl)$color[ which( names(V(simpl)) == tg_id) ] <- 'red'
bd.nw <- suppressWarnings(
ggnet2(
net = simpl,
mode = 'kamadakawai',
edge.color = 'grey50',
edge.lty = 3,
node.size = 'degree',
max_size = 9,
node.color = 'color',
node.shape = 'shape',
# node.alpha = 'degree',
label = 'abbr' ,
label.size = 3
) +
theme(legend.position = 'none',
plot.title = element_text(size = 10)) +
geom_point( aes(text = paste0(V(simpl)$term, '\n', V(simpl)$n_symbol, ' genes')),
color = 'grey80', alpha = 0, size = 8) + #
ggtitle(paste0(tg_name, ' (', tg_id,') network neighborhood'))
)
bd.nw
simpl
vertex.attributes(simpl)
names(V(simpl))
tg_id
which( names(V(simpl)) == tg_id )
bd.nw <- suppressWarnings(
ggnet2(
net = simpl,
mode = 'kamadakawai',
edge.color = 'grey50',
edge.lty = 3,
# node.size = 'degree',
max_size = 9,
node.color = 'NES',
node.shape = 'shape',
# node.alpha = 'degree',
label = 'abbr' ,
label.size = 3
) +
theme(legend.position = 'none',
plot.title = element_text(size = 10)) +
geom_point( aes(text = paste0(V(simpl)$term, '\n', V(simpl)$n_symbol, ' genes')),
color = 'grey80', alpha = 0, size = 8) + #
ggtitle(paste0(tg_name, ' (', tg_id,') network neighborhood'))
)
bd.nw
tg_id
tg_id = 'GO:0005747'
sub.g = delete.edges(graph ,
edges = E(graph)[ E(graph)$kappa < kappa_thresh ] )
if( 'n_le_genes' %in% vertex_attr_names(sub.g) ){
sub.g = delete.vertices(sub.g,
v = V(sub.g)[ !is.na(V(sub.g)$none) & V(sub.g)$none == 1]
)
}
# identify terms N hops away from the query
terms <- neighborhood(sub.g, order = depth, nodes = tg_id)[[1]]
terms
# remove terms not annotated to term
sub.g <- delete.vertices(
sub.g,
V(sub.g)[ !( V(sub.g) %in% unique(terms)
# | !is.na(igraph::V(sub.g)$label)
)
]
)
sub.g
# Remove the unconnected nodes.
unconnected_nodes <- which( degree(sub.g) == 0 )
sub.g <- delete.vertices(sub.g, unconnected_nodes)
sub.g
# remove redundant edges
simpl <- igraph::simplify(sub.g, edge.attr.comb = c(kappa = 'max'))
simpl
# add node degree to graph
V(simpl)$degree <- degree(simpl)
V(simpl)$shape <- 20
V(simpl)$shape[ which( names(V(simpl)) == tg_id) ] <- 18
ggnet2(net = simpl,mode = 'kamadakawai')
ggnet2(net = simpl,mode = 'kamadakawai', color = 'NES')
ggnet2(net = simpl,mode = 'kamadakawai', color = 'padj')
ggnet2(net = simpl,mode = 'kamadakawai', size = 'padj')
